
"""
Changes that should be made to an instrument's configuration
"""
input ConfigurationUpdates {
	"""
	New template used to determine the root data directory
	"""
	directory: DirectoryTemplate
	"""
	New template used to determine the relative path to the main scan file for a collection
	"""
	scan: ScanTemplate
	"""
	New template used to determine the relative path for detector data files
	"""
	detector: DetectorTemplate
	"""
	The highest scan number to have been allocated. The next scan files generated will use the
	next number.
	"""
	scanNumber: Int
	"""
	The extension of the files used to track scan numbers by GDA's numtracker facility
	"""
	trackerFileExtension: String
}

"""
The current configuration for an instrument
"""
type CurrentConfiguration {
	"""
	The name of the instrument
	"""
	instrument: String!
	"""
	The template used to build the path to the visit directory for an instrument
	"""
	directoryTemplate: String!
	"""
	The template used to build the path of a scan file for a data acquisition, relative to the
	root of the visit directory.
	"""
	scanTemplate: String!
	"""
	The template used to build the path of a detector's data file for a data acquisition,
	relative to the root of the visit directory.
	"""
	detectorTemplate: String!
	"""
	The latest scan number stored in the DB. This is the last scan number provided by this
	service but may not reflect the most recent scan number for an instrument if an external
	service (eg GDA) has incremented its own number tracker.
	"""
	dbScanNumber: Int!
	"""
	The highest matching number file for this instrument in the configured tracking directory.
	May be null if no directory is available for this instrument or if there are no matching
	number files.
	"""
	fileScanNumber: Int
	"""
	The file extension used for the file based tracking, eg using an extension of 'ext'
	would create files `1.ext`, `2.ext` etc
	"""
	trackerFileExtension: String
}

scalar Detector

"""
GraphQL type to mimic a key-value pair from the map type that GraphQL doesn't have
"""
type DetectorPath {
	"""
	The name of the detector that should use this path
	"""
	name: String!
	"""
	The path where the detector should write its data
	"""
	path: String!
}

"""
A template describing the location within a visit directory where the data for a given detector should be written

It should contain placeholders for {detector} and {scan_number} to ensure paths are unique between scans and for multiple detectors.
"""
scalar DetectorTemplate

"""
A template describing the path to the visit directory for an instrument. It should be an absolute path and contain placeholders for {instrument} and {visit}.
"""
scalar DirectoryTemplate




"""
Queries that modify the state of the numtracker configuration in some way
"""
type Mutation {
	"""
	Generate scan file locations for the next scan
	"""
	scan(instrument: String!, visit: String!, sub: Subdirectory): ScanPaths!
	"""
	Add or modify the stored configuration for an instrument
	"""
	configure(instrument: String!, config: ConfigurationUpdates!): CurrentConfiguration!
}

"""
Queries relating to numtracker configurations that have no side-effects
"""
type Query {
	"""
	Get the visit directory information for the given instrument and visit.
	This information is not scan specific
	"""
	paths(instrument: String!, visit: String!): VisitPath!
	"""
	Get the current configuration for the given instrument
	"""
	configuration(instrument: String!): CurrentConfiguration!
	"""
	Get the configurations for all available instruments
	Can be filtered to provide one or more specific instruments
	"""
	configurations(instrumentFilters: [String!]): [CurrentConfiguration!]!
}

"""
Paths and values related to a specific scan/data collection for an instrument
"""
type ScanPaths {
	"""
	The visit used to generate this scan information. Should be the same as the visit passed in
	"""
	visit: VisitPath!
	"""
	The root scan file for this scan. The path has no extension so that the format can be
	chosen by the client.
	"""
	scanFile: String!
	"""
	The scan number for this scan. This should be unique for the requested instrument.
	"""
	scanNumber: Int!
	"""
	The paths where the given detectors should write their files.
	
	Detector names are normalised before being used in file names by replacing any
	non-alphanumeric characters with '_'. If there are duplicate names in the list
	of detectors after this normalisation, there will be duplicate paths in the
	results.
	"""
	detectors(names: [Detector!]!): [DetectorPath!]!
}

"""
A template describing the location within a visit directory where the root scan file should be written. It should be a relative path and contain a placeholder for {scan_number} to ensure files are unique.
"""
scalar ScanTemplate


scalar Subdirectory

"""
The path to a visit directory and the components used to build it
"""
type VisitPath {
	"""
	The visit for which this is the visit directory
	"""
	visit: String!
	"""
	The instrument for which this is the visit directory
	"""
	instrument: String!
	"""
	The absolute path to the visit directory
	"""
	directory: String!
}

directive @include(if: Boolean!) on FIELD | FRAGMENT_SPREAD | INLINE_FRAGMENT
directive @skip(if: Boolean!) on FIELD | FRAGMENT_SPREAD | INLINE_FRAGMENT
schema {
	query: Query
	mutation: Mutation
}
